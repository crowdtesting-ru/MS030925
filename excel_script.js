// –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ JSON!
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SheetJS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const $fio = document.getElementById('fio');
const $btn = document.getElementById('findBtn');
const $addresses = document.getElementById('addresses');
const $details = document.getElementById('details');
const $container = document.querySelector('.container');

// –ö–µ—à –¥–∞–Ω–Ω—ã—Ö Excel
let excelData = {
    –≤—ã–±–æ—Ä–∫–∞: null,
    —Ç–µ–∫—Å—Ç—ã: null
};

// –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
const statusIndicator = document.createElement('div');
statusIndicator.className = 'status-indicator';
document.body.appendChild(statusIndicator);

// –£—Ç–∏–ª–∏—Ç—ã
function htmlEscape(str) {
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
}

function normalizeString(text) {
    if (!text) return '';
    return text.toString().toLowerCase().replace(/\s+/g, '').replace(/—ë/g, '–µ');
}

function showLoading(button, text = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const originalText = button.textContent;
    button.disabled = true;
    button.innerHTML = `<span class="loading">${text}</span>`;
    return originalText;
}

function hideLoading(button, originalText) {
    button.disabled = false;
    button.textContent = originalText;
}

function showStatus(message, isError = false) {
    statusIndicator.textContent = message;
    statusIndicator.className = `status-indicator ${isError ? 'error' : 'success'} show`;
    
    setTimeout(() => {
        statusIndicator.classList.remove('show');
    }, 3000);
}

function animateResults() {
    const cards = document.querySelectorAll('.addr');
    cards.forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
        card.classList.add('fadeInUp');
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
async function loadExcelFile() {
    try {
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ file:// (–±—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç fetch)
        if (location.protocol === 'file:') {
            showStatus('–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ http://localhost:8080/ (–∞ –Ω–µ file://)', true);
            console.error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ file:// ‚Äî fetch –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π –±—Ä–∞—É–∑–µ—Ä–∞.');
            return false;
        }

        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É Excel —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...');
        showStatus('–ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª...', false);
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è (ASCII), –∑–∞—Ç–µ–º —Å—Ç–∞—Ä–æ–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–µ
        const candidatePaths = ['data.xlsx', '–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.xlsx'];
        let response = null;
        let lastError = null;
        for (const path of candidatePaths) {
            try {
                const r = await fetch(encodeURI(path));
                if (r.ok) {
                    response = r;
                    console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${path}`);
                    break;
                } else {
                    lastError = new Error(`HTTP ${r.status} –¥–ª—è ${path}`);
                }
            } catch (e) {
                lastError = e;
            }
        }

        if (!response) {
            throw lastError || new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Excel —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π');
        }
        
        console.log('‚úÖ Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
        const arrayBuffer = await response.arrayBuffer();
        const workbook = XLSX.read(arrayBuffer, { type: 'array' });
        
        console.log('üìã –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã:', workbook.SheetNames);
        
        // –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "–í—ã–±–æ—Ä–∫–∞"
        if (workbook.SheetNames.includes('–í—ã–±–æ—Ä–∫–∞')) {
            const worksheet = workbook.Sheets['–í—ã–±–æ—Ä–∫–∞'];
            excelData.–≤—ã–±–æ—Ä–∫–∞ = XLSX.utils.sheet_to_json(worksheet);
            console.log(`üìä –õ–∏—Å—Ç "–í—ã–±–æ—Ä–∫–∞": ${excelData.–≤—ã–±–æ—Ä–∫–∞.length} –∑–∞–ø–∏—Å–µ–π`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
            console.log('üîç –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:', excelData.–≤—ã–±–æ—Ä–∫–∞.slice(0, 3));
        } else {
            console.error('‚ùå –õ–∏—Å—Ç "–í—ã–±–æ—Ä–∫–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            showStatus('–õ–∏—Å—Ç "–í—ã–±–æ—Ä–∫–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ!', true);
            return false;
        }
        
        // –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "–¢–µ–∫—Å—Ç—ã"
        if (workbook.SheetNames.includes('–¢–µ–∫—Å—Ç—ã')) {
            const worksheet = workbook.Sheets['–¢–µ–∫—Å—Ç—ã'];
            const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
            excelData.—Ç–µ–∫—Å—Ç—ã = rawData;
            console.log(`üìù –õ–∏—Å—Ç "–¢–µ–∫—Å—Ç—ã": ${rawData.length} —Å—Ç—Ä–æ–∫`);
        } else {
            console.error('‚ùå –õ–∏—Å—Ç "–¢–µ–∫—Å—Ç—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            showStatus('–õ–∏—Å—Ç "–¢–µ–∫—Å—Ç—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ!', true);
            return false;
        }
        
        console.log('üéâ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
        showStatus(`‚úÖ Excel –∑–∞–≥—Ä—É–∂–µ–Ω: ${excelData.–≤—ã–±–æ—Ä–∫–∞.length} –∑–∞–ø–∏—Å–µ–π`, false);
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel:', error);
        showStatus(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: ${error.message}`, true);
        return false;
    }
}

// –ü–æ–∏—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –§–ò–û
async function findAssignments(fio) {
    console.log('üîç –ò—â–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –§–ò–û:', fio);
    
    if (!excelData.–≤—ã–±–æ—Ä–∫–∞) {
        console.log('üìÑ –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º Excel...');
        const loaded = await loadExcelFile();
        if (!loaded) return [];
    }
    
    const normalizedFio = normalizeString(fio);
    console.log('üî§ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –§–ò–û:', normalizedFio);
    
    const results = [];
    let checkedCount = 0;
    let wave1Count = 0;
    let matchingTesters = [];
    
    excelData.–≤—ã–±–æ—Ä–∫–∞.forEach((row, index) => {
        checkedCount++;
        
        const —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ = normalizeString(row['–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'] || '');
        const –≤–æ–ª–Ω–∞–°—ã—Ä—å–µ = row['‚Ññ –≤–æ–ª–Ω—ã'];
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–ª–Ω—ã: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 1, '1', '1 ', '1.0', '1,0'
        const –≤–æ–ª–Ω–∞–°—Ç—Ä = String(–≤–æ–ª–Ω–∞–°—ã—Ä—å–µ ?? '').trim().replace(',', '.');
        const —ç—Ç–æ–ü–µ—Ä–≤–∞—è–í–æ–ª–Ω–∞ = –≤–æ–ª–Ω–∞–°—ã—Ä—å–µ === 1 || –≤–æ–ª–Ω–∞–°—Ç—Ä === '1' || –≤–æ–ª–Ω–∞–°—Ç—Ä === '1.0';
        
        if (—ç—Ç–æ–ü–µ—Ä–≤–∞—è–í–æ–ª–Ω–∞) {
            wave1Count++;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (row['–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'] && row['–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'].trim()) {
            matchingTesters.push({
                original: row['–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'],
                normalized: —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫,
                wave: –≤–æ–ª–Ω–∞
            });
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –§–ò–û –∏ –≤–æ–ª–Ω–µ 1
        if (—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫.includes(normalizedFio) && —ç—Ç–æ–ü–µ—Ä–≤–∞—è–í–æ–ª–Ω–∞) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1}:`, {
                —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫: row['–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'],
                normalized: —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫,
                –≤–æ–ª–Ω–∞: –≤–æ–ª–Ω–∞–°—ã—Ä—å–µ,
                –ø–∞—Ä—Ç–Ω–µ—Ä: row['–ü–∞—Ä—Ç–Ω–µ—Ä'],
                —Ä–µ—Å—Ç–æ—Ä–∞–Ω: row['–†–µ—Å—Ç–æ—Ä–∞–Ω']
            });
            
            results.push({
                partner: row['–ü–∞—Ä—Ç–Ω–µ—Ä'] || '',
                restaurant: row['–†–µ—Å—Ç–æ—Ä–∞–Ω'] || '',
                address: row['–ê–¥—Ä–µ—Å'] || '',
                city: row['–ì–æ—Ä–æ–¥'] || '',
                method: row['–°–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏'] || '',
                wave: –≤–æ–ª–Ω–∞–°—ã—Ä—å–µ,
                booking: row['–ù—É–∂–Ω–∞ –±—Ä–æ–Ω—å?'] || '',
                min_order: row['–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É'] || '',
                website: row['–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'] || '',
                comment: row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] || '',
                display: `${row['–ü–∞—Ä—Ç–Ω–µ—Ä'] || ''} ‚Üí ${row['–†–µ—Å—Ç–æ—Ä–∞–Ω'] || ''} ‚Üí ${row['–ê–¥—Ä–µ—Å'] || ''} ‚Üí ${row['–°–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏'] || ''}`
            });
        }
    });
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:
        - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${checkedCount}
        - –ó–∞–ø–∏—Å–µ–π —Å –≤–æ–ª–Ω–æ–π 1: ${wave1Count}
        - –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}
        - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏ (–ø–µ—Ä–≤—ã–µ 10):`, matchingTesters.slice(0, 10));
    
    return results;
}

// –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É –∏ —Å–ø–æ—Å–æ–±—É
async function findText(partner, method) {
    if (!excelData.—Ç–µ–∫—Å—Ç—ã) {
        const loaded = await loadExcelFile();
        if (!loaded) return '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }
    
    const normalizedPartner = normalizeString(partner);
    const normalizedMethod = normalizeString(method);
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ "–¢–µ–∫—Å—Ç—ã": 
    // –°—Ç—Ä–æ–∫–∞ 0: –ø–∞—Ä—Ç–Ω–µ—Ä—ã, –°—Ç—Ä–æ–∫–∞ 1: —Å–ø–æ—Å–æ–±—ã, –°—Ç—Ä–æ–∫–∞ 2: —Ç–µ–∫—Å—Ç—ã
    if (excelData.—Ç–µ–∫—Å—Ç—ã.length < 3) {
        return '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ "–¢–µ–∫—Å—Ç—ã"';
    }
    
    const partnersRow = excelData.—Ç–µ–∫—Å—Ç—ã[0] || [];
    const methodsRow = excelData.—Ç–µ–∫—Å—Ç—ã[1] || [];
    const textsRow = excelData.—Ç–µ–∫—Å—Ç—ã[2] || [];
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–ª–æ–Ω–∫—É
    let foundText = '';
    
    for (let i = 1; i < partnersRow.length; i++) {
        const partnerInCol = normalizeString(partnersRow[i] || '');
        const methodInCol = normalizeString(methodsRow[i] || '');
        
        if (partnerInCol === normalizedPartner && methodInCol === normalizedMethod) {
            foundText = textsRow[i] || '';
            break;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞)
    if (!foundText && textsRow.length > 0) {
        foundText = textsRow[textsRow.length - 1] || '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }
    
    return foundText || '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
function renderAddresses(items) {
    if (!items || items.length === 0) {
        $addresses.innerHTML = '<div class="no-results">–ê–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –§–ò–û –≤ –≤–æ–ª–Ω–µ 1</div>';
        $addresses.style.display = 'block';
        $container.classList.add('with-result');
        return;
    }

    const html = items.map(item => `
        <div class="addr" data-partner="${htmlEscape(item.partner)}" data-method="${htmlEscape(item.method)}">
            <div class="addr-header">
                <strong>${htmlEscape(item.partner)}</strong>
                <span class="method">${htmlEscape(item.method)}</span>
            </div>
            <div class="addr-details">
                <div class="restaurant">${htmlEscape(item.restaurant)}</div>
                <div class="address">${htmlEscape(item.address)}</div>
                ${item.city ? `<div class="city">–ì–æ—Ä–æ–¥: ${htmlEscape(item.city)}</div>` : ''}
                ${item.booking ? `<div class="booking">–ë—Ä–æ–Ω—å: ${htmlEscape(item.booking)}</div>` : ''}
                ${item.min_order ? `<div class="min-order">–ú–∏–Ω. –∑–∞–∫–∞–∑: ${htmlEscape(item.min_order)}</div>` : ''}
                ${item.website ? `<div class="website"><a href="${htmlEscape(item.website)}" target="_blank">–°–∞–π—Ç</a></div>` : ''}
                ${item.comment ? `<div class="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${htmlEscape(item.comment)}</div>` : ''}
            </div>
        </div>
    `).join('');

    $addresses.innerHTML = html;
    $addresses.style.display = 'block';
    $container.classList.add('with-result');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
    document.querySelectorAll('.addr').forEach(addr => {
        addr.addEventListener('click', () => {
            const partner = addr.dataset.partner;
            const method = addr.dataset.method;
            onPick({ partner, method, display: addr.querySelector('.addr-header').textContent });
        });
    });

    animateResults();
    showStatus(`–ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: ${items.length}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
async function onPick(item) {
    try {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç details –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!$details) {
            const detailsElement = document.createElement('div');
            detailsElement.id = 'details';
            detailsElement.className = 'details';
            detailsElement.innerHTML = `
                <div class="tester"></div>
                <div class="place"></div>
                <div class="text"></div>
            `;
            $container.appendChild(detailsElement);
        }

        const text = await findText(item.partner, item.method);

        document.getElementById('details').style.display = 'block';
        document.querySelector('#details .tester').innerHTML = `–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫: <strong>${htmlEscape($fio.value)}</strong>`;
        document.querySelector('#details .place').innerHTML = htmlEscape(item.display);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
        const processedText = text.replace(/\n/g, '<br>');
        document.querySelector('#details .text').innerHTML = processedText;

        document.getElementById('details').scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });

        showStatus('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã');

    } catch (error) {
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞', true);
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
async function performSearch() {
    const fio = $fio.value.trim();
    if (!fio) {
        showStatus('–í–≤–µ–¥–∏—Ç–µ –§–ò–û', true);
        $fio.focus();
        return;
    }

    const originalText = showLoading($btn, '–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤...');

    try {
        const items = await findAssignments(fio);
        renderAddresses(items);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
        if ($details) {
            $details.style.display = 'none';
        }

    } catch (error) {
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', true);
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        $addresses.style.display = 'none';
        $container.classList.remove('with-result');
    } finally {
        hideLoading($btn, originalText);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –§–ò–û
    $fio.focus();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    $btn.addEventListener('click', performSearch);
    
    // –ü–æ–∏—Å–∫ –ø–æ Enter
    $fio.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            performSearch();
        }
    });
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
    try {
        await loadExcelFile();
        showStatus('Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        showStatus('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Excel', true);
    }
});
